import React, { useReducer, useContext, useEffect } from "react"
import SiteContext from "./context"
import SiteReducer from "./reducer"
import { Router } from "react-router-dom"
import routes, { renderRoutes } from "./routes"
import { createBrowserHistory } from "history"
import CssBaseline from "@material-ui/core/CssBaseline"
import { createTheme, ThemeProvider } from "@material-ui/core/styles"
import AppThemeOptions from "./assets/theme/index"
import { AppTheme } from "./assets/theme/types"
import { defaultProviders } from "@connect2ic/core"
import { Connect2ICProvider } from "@connect2ic/react"
// Styles for the ConnectDialog & Button
import "@connect2ic/core/style.css"
// optional: canister definitions generated by dfx
import * as counter from "canisters/counter"

const history = createBrowserHistory()

function App() {
  const initialState = useContext(SiteContext)
  const [state, dispatch] = useReducer(SiteReducer, initialState)
  var localTheme = localStorage.getItem("theme")
  if (localTheme === null) {
    localStorage.setItem("theme", "light")
  }

  const asyncRunner = async () => {
    dispatch({
      type: "UPDATE_THEME",
      payload: localTheme === "light" ? AppTheme.LIGHT : AppTheme.DARK,
    })
  }
  var muiTheme = createTheme(AppThemeOptions[state.theme])
  useEffect(() => {
    asyncRunner()
  }, [])
  console.log(state.theme)

  return (
    <Connect2ICProvider
      canisters={{
        counter,
      }}
      providers={defaultProviders}
    >
      <ThemeProvider theme={muiTheme}>
        <CssBaseline />
        <SiteContext.Provider value={{ state, dispatch }}>
          <Router history={history}>{renderRoutes(routes)}</Router>
        </SiteContext.Provider>
      </ThemeProvider>
    </Connect2ICProvider>
  )
}

export default App
